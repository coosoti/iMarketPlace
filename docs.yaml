swagger: "2.0"
info:
  title: iMarket REST API Documentation
  description: This documentation is provided to provide detailed explanation on the use of this API
  version: 1.0
  contact:
    email: osoticharles@gmail.com
  license:
    name: Apache 2.0
    url: "http://apache.org"
  servers:
    -url: "http://localhost:5000/"
    description: This is a local server
    -url: "https://coosoti.github.io/"
    description: This is my website
  securityDefinitions:
    Bearer:
      type: apiKey
      name: Authorization
      scheme: bearer
      in: header
      
schemes: [http,https]

definitions:
  User:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
        format: password
    required:
      - username
      - email
      - password

  Product:
    type: object:
    properties:
      title:
        type: string
      description:
        type: string
      img:
        type: string
      categories:
        type: []
      size:
        type:  string
      colour:
        type: string
      price:
        type: number
    required:
      - title
      - description
      - img
      - categories
      - size
      - colour
      - price

  Cart:
    type: object
    properties:
      productId:
        type: string
      quantity:
        type: number
    required:
      - productId
      - quantity
      
paths:
  /api/v1/auth/register:
    post:
      tags:
        - Auth
      name: User Registration
      summary: Register a new user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#definitions/User'
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password:
                type: string
          required:
            - username
            - email
            - password
      responses:
        201:
          description: User Created
        400:
          description: Missing username or email or password

  /api/v1/auth/login:
    post:
      tags:
        - Auth
      name: User Login
      summary: Logs in a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
          required:
            - username
            - password
      responses:
        '200':
          description: User Logged in Successfully
        '401':
          description: Invalid credentials

  /api/v1/users:
    get:
      tags:
        - Users
      name: Get Users
      summary: Retrieves all Users - Admin only
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          security:
            - Bearer: []
      responses:
        200:
          description: A list of all users
          schema:
            type: array
            users:
              $ref: '#/definitions/User'
        401:
          description: You are not authenticated
        403:
          description: You are not allowed to perform this action

  /api/v1/users/find/{id}:
    get:
      tags:
        - Users
      name: Get one User Object
      summary: Retrieves One user object
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
        - name: token
          in: header
          security:
            - Bearer: []
      responses:
        200:
          description: One user details
        401:
          description: You are not authenticated
        403:
          description: You are not allowed to perform this action

  /api/v1/users/{id}:
    put:
      tags:
        - Users
      name: Update User Object
      summary: Update username and other details of a user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
        - name: token
          in: header
          security:
            Bearer: []
        - name: body
          in: body
          schema:
            $ref: '#definitions/User'
            type: object
            properties:
              username:
                type: string
              email:
                type: string
      responses:
        200:
          description: User updated succcessfully
        401:
          description: You are not authenticated
        403:
          description: Token is invalid

    delete:
      tags:
        - Users
      name: Delete a User
      summary: Delete a user from the database
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
        - name: token
          in: header
          security:
            Bearer: []
      responses:
        200:
          description: User deleted succcessfully
        401:
          description: You are not authenticated

  /api/v1/users/stats:
    get:
      tags:
        - Users
      name: Get stats for Users
      summary: Retrieves the number of users in the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          security:
            Bearer: []
      responses:
        200:
          description: Returns user stats
        401:
          description: Unauthorized

  /api/v1/products:
    post:
      tags:
        - Products
      name: Create a Product
      summary: Creates a new product and save it to the db
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          security:
            Bearer: []
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Product'
      responses:
        200:
          description: Returns the product created
        401:
          description: User not authenticated
        403:
          description: User not allowed to perform this action
      
    get:
      tags:
        - Products
      name: Get all Products
      summary: Retrieve all products in the database
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: List of all products
          schema:
            type: array
            products:
              $ref: '#/definitions/Product'
        400:
          description: Bad Request

  /api/v1/products/{id}:
    get:
      tags:
        - Products
      name: Get one product
      summary: Retrieves details of one product
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
      responses:
        200:
          description: Returns a Product
        400:
          description: Bad Request

    put:
      tags:
        - Products
      name: Update of a product
      summary: Update the details of a product
      consumes:
        - application/json
      products:
        - application/json
      parameters:
        - name: id
          in: path
        - name: token
          in: header
        - name: body
          in: body
          security:
            Bearer: []
          schema:
            type: array
            $ref: '#/definitions/Product'
      responses:
        200:
          definitions: Update successful
        401:
          description: You are not authenticated
        403:
          description: Unauthorized

    delete:
      tags:
        - Products
      name: Delete a Product
      summary: Deletes a product from the database
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
        - name: token
          in: header
      responses:
        200:
          description: Deleted succcessfully
        401:
          description: You are not authenticated
        403:
          description: You are not allowed to perform this action
            
  /api/v1/carts:
    post:
      tags:
        - Carts
      name: Creates a Cart
      summary: Creates a Cart with Products
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          in: header
        - name: body
          in: body
          security:
            Bearer: []
          schema:
            type: object
            $ref: '#/definitions/Cart'
      responses:
        200:
          description: Cart Created Successfully
        401:
          description: You are not authenticated

    get:
      tags:
        - Carts
      name: Get all Carts - Admin only
      summary: Retrieves all carts in the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          in: header
          security:
            Bearer: []
      responses:
        200:
          description: Get all Carts successfully
          schema:
            type: array
            schema:
              $ref: '#/definitions/Cart'
        401:
          description: You are not authenticated
        403:
          description: You are not allowed to perform this action
          
  /api/v1/cart/{id}:
    put:
      tags:
        - Carts
      name: Update Cart content
      summary: Update details of products in the Cart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
        - name: token
          in: header
          security:
            Bearer: []
        - name: body
          in: body
          schema:
            type: object
            $ref: '#/definitions/Cart'
            required:
              - quantity
      responses:
        200:
          description: Returns updated Cart Object
        401:
          description: User not authenticated
    
    delete:
      tags:
        - Carts
      name: Delete Cart Object
      summary: User can delete their cart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
        - name: token
          in: header
          security:
            Bearer: []
      responses:
        200:
          description: Deleted successfully
        401:
          description: User not authenticated
          
  /api/v1/cart/{userId}:
    get:
      tags:
        - Carts
      name: Get user Cart
      summary: Retrieves a User's Cart object
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
        - name: token
          in: header
          security:
            Bearer: []
      responses:
        200:
          description: Cart Object
          schema:
            type: object
            $ref: '#/definitions/Cart'
        401:
          description: User not authenticated
    
    
